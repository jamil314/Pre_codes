//                        Bismillahir Rahmanir Rahim
///ALGO: LCA(Binary lifting)
/// https://www.codechef.com/viewsolution/43895242
#include<bits/stdc++.h>
#define pb push_back
#define F first
#define S second
#define all(v) v.begin(), v.end()
#define FILL(a, x) memset(a, x, sizeof(a))
#define ll long long
#define Fast ios_base::sync_with_stdio(false);cin.tie(NULL);
#define INF INT_MAX
#define mx 10010
#define logn 20
/*
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_multiset tree<pair<int, int>, null_type,less<pair<int, int> >, rb_tree_tag,tree_order_statistics_node_update>
*/
const double Pi=acos(-1);
using namespace std;
int debug=01;
int par[mx], lca[logn][mx], lvl[mx], n, cost[mx];
vector<pair<int, int>>v[mx];
void dfs(int x,int p, int val){
    par[x]=p;
    lvl[x]=lvl[p]+1;
    cost[x]=cost[p]+val;
    for(auto y:v[x]) if(y.F!=p) dfs(y.F, x, y.S);
}
void pre(){
    lvl[0]=-1;
    cost[0]=0;
    dfs(1, 0, 0);
    for(int i=1; i<=n; i++) lca[0][i]=par[i];
    for(int i=1; i<logn; i++) for(int j=1; j<=n; j++) lca[i][j]=lca[i-1][lca[i-1][j]];
}
int LCA(int x, int y){
    if(lvl[x]<lvl[y]) swap(x, y);
    for(int i=logn-1; i>=0; i--) if(lvl[x]-(1<<i)>=lvl[y]) x=lca[i][x];
    if(x==y) return x;
    for(int i=logn-1; i>=0; i--) if(lca[i][x]!=lca[i][y]) x=lca[i][x], y=lca[i][y];
    return par[x];
}
int jump(int x, int y, int h, int dx, int d){
    if(h>dx) h=d-h, x=y;
    int p=0;
    while(h){
        if(h&1) x=lca[p][x];
        p++;
        h>>=1;
    }
    return x;
}
int main() {
     Fast
	int T;
	cin>>T;
	while(T--){
        cin>>n;
        for(int i=0; i<mx; i++)v[i].clear();
        int x, y, z;
        for(int i=1; i<n; i++){
            cin>>x>>y>>z;
            v[x].pb({y, z});
            v[y].pb({x, z});
        }
        pre();
        string s;
        while(cin>>s&&s!="DONE"){
            if(s[0]=='D'){
                cin>>x>>y;
                cout<<cost[x]+cost[y]-cost[LCA(x, y)]*2<<"\n";
                continue;
            }
            cin>>x>>y>>z;
            z--;
            int lc=LCA(x, y);
            int dx=lvl[x]-lvl[lc], dy=lvl[y]-lvl[lc];
            cout<<jump(x, y, z, dx, dx+dy)<<"\n";
        }
	}
}

